@startuml

abstract class AbstractAircraft {
    + shoot()
    + forward()
}

interface EnemyFactory {
    + CreateEnemy(int locationX, int locationY, int speedX, int speedY, int hp):AbstractAircraft
}

class MobFactory {
    + CreateEnemy():AbstractAircraft
}

class EliteFactory {
    + CreateEnemy():AbstractAircraft
}

class BossFactory {
    + CreateEnemy():AbstractAircraft
}

class MobEnemy {
    - ...
    + ...()
}

class EliteEnemy {
    - ...
    + ...()
}

class BossEnemy {
    - ...
    + ...()
}
EnemyFactory .> AbstractAircraft #line:grey;line.bold;line.dashed
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- BossEnemy
EnemyFactory <|.. MobFactory
EnemyFactory <|.. EliteFactory
EnemyFactory <|.. BossFactory

abstract class AbstractProp {
    + forward()
}

interface PropFactory {
    + CreateProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}

class BloodFactory {
    + CreateProp():AbstractProp
}

class BombFactory {
    + CreateBomb():AbstractProp
}

class BulletFactory {
    + CreateBullet():AbstractProp
}

class BloodProp {
    - ...
}

class BombProp {
    - ...
}

class BulletProp {
    - ...
}
PropFactory .> AbstractProp #line:grey;line.bold;line.dashed
AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- BulletProp
PropFactory <|.. BloodFactory
PropFactory <|.. BombFactory
PropFactory <|.. BulletFactory

@enduml